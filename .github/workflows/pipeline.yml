name: SDAO A2 Pipeline
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_vpc_cidr: "10.1.0.0/16"
      TF_VAR_subnets: '{"subnet1":{"cidr":"10.1.1.0/24","name":"public-1a","az":"us-east-1a"},"subnet2":{"cidr":"10.1.2.0/24","name":"public-1b","az":"us-east-1b"}}'
      TF_VAR_vms: '{"app":{"count":2},"db":{"count":1}}'
    steps:
     - name: Checkout code
       uses: actions/checkout@v3
     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v1
       with:
         terraform_version: latest
     - name: Terraform Init
       env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
       run: |
         cd deploy/terraform 
         terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
     - name: Terraform Format
       run: |
         cd deploy/terraform 
         terraform fmt -check

     - name: Terraform Plan
       env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
       run: | 
         cd deploy/terraform
         terraform plan -input=false -lock=false
     - name: Terraform Apply
       env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
       run: |
         cd deploy/terraform
         terraform apply -auto-approve -input=false -lock=false

  clean-up:
    needs: [terraform]
    runs-on: ubuntu-latest
    env:
      TF_VAR_path_to_ssh_public_key: "../key.pub"
      TF_VAR_my_ip_address: "123.3.247.60"
      TF_VAR_allow_all_ip_addresses_to_access_database_server: "false"
      TF_VAR_vpc_cidr: "10.1.0.0/16"
      TF_VAR_subnets: '{"subnet1":{"cidr":"10.1.1.0/24","name":"public-1a","az":"us-east-1a"},"subnet2":{"cidr":"10.1.2.0/24","name":"public-1b","az":"us-east-1b"}}'
      TF_VAR_vms: '{"app":{"count":2},"db":{"count":1}}'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          cd deploy/terraform 
          terraform init
      - name: Terraform Destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          cd deploy/terraform 
          terraform destroy -auto-approve -lock=false
