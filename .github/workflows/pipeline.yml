name: SDAO A2 Pipeline
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:


env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
jobs:
  terraform:
    outputs:
     db_ip: ${{ steps.db.outputs.db_ip }}
     app_instance1_ip: ${{ steps.app1.outputs.app_instance1_ip }}
     app_instance2_ip: ${{ steps.app2.outputs.app_instance2_ip }}
     exitcode: ${{ steps.plan.outputs.exitcode }}
    runs-on: ubuntu-latest
    steps:
     - name: Checkout code
       uses: actions/checkout@v3
     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v1
       with:
         terraform_version: latest
         terraform_wrapper: false
     - name: Terraform Init
       run: |
         cd deploy/terraform 
         terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
     - name: Terraform Format
       run: |
         cd deploy/terraform 
         terraform fmt -check

     - name: Terraform Plan
       id: plan
       run: | 
         cd deploy/terraform
         terraform plan -input=false -lock=false -detailed-exitcode -out=plan.out
       continue-on-error: true

     - name: Terraform Apply
       if: ${{ steps.plan.outputs.exitcode != 0 }}
       run: |
         cd deploy/terraform
         terraform apply -auto-approve -input=false -lock=false 

     - name: Get DB IP Address Output
       id: db
       if: ${{ steps.plan.outputs.exitcode != 0 }}
       run: |
         cd deploy/terraform
         echo "db_ip=$(terraform output -raw db_ip)" >> "$GITHUB_OUTPUT"
     - name: Get App1 IP Address Output
       id: app1
       if: ${{ steps.plan.outputs.exitcode != 0 }}
       run: |
         cd deploy/terraform
         echo "app_instance1_ip='$(terraform output -raw app_instance1_ip)'" >> $GITHUB_OUTPUT
     - name: Get App1 IP Address Output
       id: app2
       if: ${{ steps.plan.outputs.exitcode != 0 }}
       run: |
         cd deploy/terraform
         echo "app_instance2_ip='$(terraform output -raw app_instance2_ip)'" >> $GITHUB_OUTPUT 
    
  ansible:
    runs-on: ubuntu-latest
    if: ${{ needs.terraform.outputs.exitcode != 0 }}
    needs: [terraform]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible
      - name: Create Inventory File
        run: |
          cat << EOF > "deploy/ansible/inventory.yml"
          db_servers:
            hosts:
              db1:
                ansible_host: ${{ needs.terraform.outputs.db_ip }}
                ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          app_servers:
            hosts:
              app1:
                ansible_host: ${{ needs.terraform.outputs.app_instance1_ip }}
                ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
              app2:
                ansible_host: ${{ needs.terraform.outputs.app_instance2_ip }}
                ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          EOF
          cat deploy/ansible/inventory.yml
      - name: Copy private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

      - name: Run Database Playbook
        run: |
           cd deploy/ansible 
           ansible-playbook db-playbook.yml -i inventory.yml --private-key ~/.ssh/id_rsa
      - name: Run App Playbook
        run: |
           cd deploy/ansible
           ansible-playbook app-playbook.yml -i inventory.yml --private-key ~/.ssh/id_rsa