name: SDAO A2 Pipeline
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_vpc_cidr: "10.1.0.0/16"
      TF_VAR_subnets: '{"subnet1":{"cidr":"10.1.1.0/24","name":"public-1a","az":"us-east-1a"},"subnet2":{"cidr":"10.1.2.0/24","name":"public-1b","az":"us-east-1b"}}'
      TF_VAR_vms: '{"app":{"count":2},"db":{"count":1}}'
    steps:
     - name: Checkout code
       uses: actions/checkout@v3
     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v1
       with:
         terraform_version: latest
     - name: Terraform Init
       env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
       run: |
         cd deploy/terraform 
         terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
     - name: Terraform Format
       run: |
         cd deploy/terraform 
         terraform fmt -check

     - name: Terraform Plan
       env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
       run: | 
         cd deploy/terraform
         terraform plan -input=false -lock=false
     - name: Terraform Apply
       env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
       run: |
         cd deploy/terraform
         terraform apply -auto-approve -input=false -lock=false

     - name: Get Outputs
       env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
       run: |
         cd deploy/terraform
         echo "::set-output name=db_ip::$(terraform output -raw db_ip)"
         echo "::set-output name=app_instance1_ip::$(terraform output -raw app_instance1_ip)"
         echo "::set-output name=app_instance2_ip::$(terraform output -raw app_instance2_ip)"

  ansible:
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible
      - name: Create Inventory File
        run: |
          cat << EOF > "deploy/ansible/inventory.yml"
          db_servers:
            hosts:
              db1:
                ansible_host: ${{ steps.terraform.outputs.db_ip }}
                ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          app_servers:
            hosts:
              app1:
                ansible_host: ${{ steps.terraform.outputs.app_instance1_ip }}
                ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
              app2:
                ansible_host: ${{ steps.terraform.outputs.app_instance2_ip }}
                ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          EOF
          cat deploy/ansible/inventory.yml
      - name: Copy private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

      - name: Run Database Playbook
        run: |
           cd deploy/ansible
           ansible-playbook db-playbook.yml -i inventory.yml --private-key ~/.ssh/id_rsa
      - name: Run App Playbook
        run: |
           cd deploy/ansible
           ansible-playbook app-playbook.yml -i inventory.yml --private-key ~/.ssh/id_rsa